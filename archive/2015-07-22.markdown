---
title: 20150722
layout: outline
---

## All

### Warm Up (8:30 - 9:00)

A garland word is one that starts and ends with the same N letters in the same order,
for some N greater than 0, but less than the length of the word. I'll call the maximum N for
which this works the garland word's degree. For instance, "onion" is a garland word of degree
2, because its first 2 letters "on" are the same as its last 2 letters. The name "garland
word" comes from the fact that you can make chains of the word in this manner:

`onionionionionionionionionionion...`

Today's challenge is to write a function garland that, given a lowercase word, returns the
degree of the word if it's a garland word, and 0 otherwise.


garland("programmer") => 0

garland("ceramic") => 1

garland("onion") => 2

garland("alfalfa") => 4


## 1502

### Flatten Without Flatten (9:00 - 9:45)

Let's apply some of the topics we've covered over the last few days.

As it turns out, JavaScript's `Array.prototype` does not actually have a `flatten` method—not even in ES6. We're going to need you to go ahead and implement one for us. Some recursion is your friend here.

1. Start with a function that takes an array and returns its flattened version.
2. Add this method to `Array.prototype`, (in this case, the unflattened array will be `this`).

**Bonus**: If you're feeling brave—can you implement `Array.prototype.unique`?

We'll meet back in Classroom A at 9:35 to show off our solutions.

You'll work in the following pairs (or triplet, in one case):

* Tracy Caruso & Minnie Lee
* Mihir Parikh & Tess Griffin
* Lori Culberson & Andrew Carmer
* Kenny Chen & Kyle Henson
* Fred Block & Eric Dowty
* Kristina Brown & Thomas Leskin
* David Daniel & Michelle Golle & Patrick Medaugh

### ECMAScript 6 (9:45 - 11:00)

On Monday, we talked about how to integrate Babel into your projects. Today, we'll talk a little bit more about what that means.

* [Slides](https://www.icloud.com/keynote/AwBWCAESEFoVLpRtDJo8Kk3piV5sbNkaKlAg9v2X5wje5AErTxU8hnZ5ILmhI-KWx48mqZPuAQnFUd-t7QX4SlH6BwMCUCAQEEIBTGfYPXd1HM1uffj9AhZhDBm7G1jlzf7vSyOtECr64o#ES6_for_Turing_Students)

We'll cover:

* Arrow functions
* `let` and `const`
* Default, rest, and spread operators

We'll refactor some of [the live coding of Lights Out from Monday](https://github.com/turingschool-examples/lights-out).

### Generators (11:00 - 12:00)

We'll talk a little bit about generators in ES6. We'll learn how to use generator functions that can pause and resume execution as well as return multiple values.

* [Lesson Plan](https://github.com/turingschool/lesson_plans/blob/master/ruby_04-apis_and_scalability/functions_in_javascript.md#generators)

You'll be working in the following pairs/triplet to implement a Fibonacci generator:

* Minnie Lee & Tess Griffin
* Kristina Brown & Kyle Henson
* Kenny Chen & Lori Culberson
* Andrew Carmer & Michelle Golle
* David Daniel & Patrick Medaugh
* Tracy Caruso & Eric Dowty
* Fred Block & Mihir Parikh & Thomas Leskin

### Project Work Time and Check-Ins (1:00 - 4:00)

* 1:00 - 1:20: Minnie Lee & Patrick Medaugh
* 1:25 - 1:45: Thomas Leskin & Michelle Golle
* 1:50 - 2:10: Tess Griffin & Eric Dowty
* 2:15 - 2:35: David Daniel & Tracy Caruso
* 2:40 - 3:00: Kyle Henson & Mihir Parikh
* 3:05 - 3:25: Lori Culberson & Fred Block
* 3:30 - 3:50: Andrew Carmer & Kristina Brown & Kenny Chen

## 1503

### Testing an External API (9:00 - 12:00)

Join Horace in Classroom B to talk about [testing against
External APIs](https://github.com/turingschool/lesson_plans/blob/master/ruby_04-apis_and_scalability/mocking_apis_v2.markdown).

### Project Work Time and Check-Ins (1:00 - 4:00)

Continue working on your APICurious projects. You should be wrapping up
with your Iteration 1 features and moving into Iteration 2. We will work
with you during the checkin to troubleshoot any issues and identify next features
to work on.

__Checkins:__

__With Horace__

* (1:00 - 1:10) Jamie
* (1:10 - 1:20) Drew F
* (1:20 - 1:30) Dave
* (1:30 - 1:40) Max
* (1:40 - 1:50) Drew R
* (1:50 - 2:00) Justin
* (2:00 - 2:10) Josh
* (2:10 - 2:20) Erik
* (2:20 - 2:30) Vanessa
* (2:30 - 2:40) Ricky
* (2:40 - 2:50) chelsea
* (2:50 - 3:00) sally

__With Mike__

* (1:40 - 1:50) rob
* (1:50 - 2:00) jack
* (2:00 - 2:10) lev
* (2:10 - 2:20) margarett
* (2:20 - 2:30) whitney
* (2:30 - 2:40) morgan
* (2:40 - 2:50) brett

## 1505

### Form and Route Helpers in Rails (9:00 - 12:00)

Join Rachel in Classroom C.

[Lesson Plan](https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/forms_and_route_helpers_in_rails.markdown)

### Blogger Tutorial Kickoff and Work Time (1:00 - 4:00)

Join Josh in Classroom C.

## 1507

### Ruby's Object Model (9:00 - 10:30)

Join Jeff in the Workspace to talk about how Ruby actually works.

### Pairing Practice (10:30 - 12:00)

Then we're going to do a bit of short pairing practice.

#### Pairings

*Session 1*

* Ryan Asensio & Alon Waisman
* Justin Holzmann & George Hudson
* Matt Ewell & Matt Hecker
* Russell Harms & DJ Greenfield
* Travis Haby & Regis Boudinot
* Michael Wong & Mimi Schatz
* Chad Minnerath & Rebekah Sosa
* Chris Cenatiempo & Nicole Hall
* Justin Pease & Bret Doucette
* Tyler Komoroske & Jeff Ruane
* Jerrod Paul Junker & Rachel Parri
* David Stinnette & Adam Jensen
* Rose Kohn & Mary Beth Burch

*Session 2*

* George Hudson & Matt Ewell
* Matt Hecker & Russell Harms
* Ryan Asensio & Justin Holzmann
* Alon Waisman * DJ Greenfield
* Bret Doucette & Rose Kohn
* David Stinnette & Rebekah Sosa
* Chad Minnerath & Michael Wong
* Mary Beth Burch & Jerrod Paul Junker
* Adam Jensen & Mimi Schatz
* Jeff Ruane & Chris Cenatiempo
* Travis Haby & Justin Pease
* Regis Boudinot & Tyler Komoroske
* Rachel Parri & Nicole Hall

#### Challenges

* Session 1: [Pattern Matcher](https://github.com/turingschool/challenges/blob/master/pattern_generator.markdown)
* Session 2: [Well-Formed Strings](https://github.com/turingschool/challenges/blob/master/well_formed_strings.markdown)

### Work Time (1:00 - 4:00)

Then this afternoon push forward with your projects.
