---
title: 20150804
layout: outline
---

Today, we celebrate Coast Guard Day.

## All

### Warm Up (8:30 - 9:00)

Using [names.txt](https://projecteuler.net/project/resources/p022_names.txt) (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.

For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 Ã— 53 = 49714.

What is the total of all the name scores in the file?


## 1502

### Binary Search Tree Review && Currying and Partial Application (9:00 - 10:00)

Meet in Classroom A with Steve to recap on the binary search trees and doubly linked lists form yesterday. Then we'll take another dive into `Function.prototype.bind` and partial application before taking a look at another functional programming concept: currying.

#### Resources

* [Function.prototype.bind Revisited](https://github.com/mdn/advanced-js-fundamentals-ck/blob/gh-pages/tutorials/02-functions/03-what-is-this.md#explicitly-setting-context-with-bind)
* [Partial Application and Currying](https://github.com/mdn/advanced-js-fundamentals-ck/blob/gh-pages/tutorials/02-functions/02-currying-and-partial-application.md)

### Testing JavaScript: Sinon.js (10:00 - 11:00)

Stay around a little longer in Classroom A. We'll explore using [Sinon](http://sinonjs.org) to spy on methods.

We'll need two repositories:

* [Spy vs. Spy](https://github.com/turingschool-examples/spy-vs-spy)
* [Testing JavaScript](https://github.com/turingschool-examples/testing-javascript)

### Project Work Time (11:00 - 4:00)

Steve is on hand for questions in the afternoon. Please be ready with working applications for you check-ins tomorrow.


## 1503

### Working with AJAX (9:00 - 11:00)

Learn about Asynchronous JavaScript and XML (AJAX) and how to use it to make HTTP requests from your browser.

For this session, please clone the following:

```
git clone https://github.com/turingschool-examples/birdeck.git fundamental_ajax
```

The materials for this lesson are:

* [Notes](https://www.dropbox.com/s/drt47u202pe9957/Turing%20-%20Working%20with%20AJAX.pages?dl=0)
* [Video](https://vimeo.com/135387081)

Meet Jorge in Classroom B.

### Debugging JavaScript (11:00 - 12:00)

Learn about the developer tools available in your browser to debug JavaScript.

Meet Steve in Classroom B. We'll discuss the following topics:

* Accessing the developer tools
	* Pinning the tools to the top or right
	* Breaking them out into their own window
	* Advanced settings
* Inspecting elements
	* Computed styles
	* Forcing element state
* `console.log`
* `console.table`
* `console.assert`
* `debugger;`
	* Setting breakpoints in the tools
	* Adding conditional breakpoints
* Network performance
	* Debugging AJAX
* Pause on Caught Exception
* Responsive Mode

Extra curricular: [Code School's Dev Tools Course](http://discover-devtools.codeschool.com/)

### Project Check-Ins and Work Time (1:00 - 4:00)

Meet with Jorge at his desk for check-ins. Since there are many projects, please be on time.

* 1:00 - Brett Grigsby
* 1:10 - Max Tedford
* 1:20 - Rick Bacci
* 1:30 - Sally MacNicholas
* 1:40 - Vanessa Gomez
* 1:50 - Andrew Fink
* 2:00 - Morgan Miller
* 2:10 - Justin Holmes
* 2:20 - Drew Reynolds
* 2:30 - Josh Cass
* 2:40 - Lev Kravinsky
* 2:50 - Whitney Hiemstra
* 3:00 - Erik Butcher
* 3:10 - Margarett Ly
* 3:20 - Chelsea Worrel
* 3:30 - Rob Cornell
* 3:40 - Dave Maurer
* 3:50 - Jamie Kawahara
* 4:10 - Jack Yeh


## 1505

### Rails View Tips and Tricks (9:00 - 10:30)

Join Josh & Mike in Classroom C to look at [Rails Views Tips & Techniques](https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/rails_views_tips_and_techniques.markdown).

### Little Shop Work Time (10:30 - 12:00)

Work time.

### Little Shop Work Time (1:00 - 4:00)

Work Time


## 1507 - Foxtrot

### Decomposing Sales Engine with POODR (9:00 - 10:30)

Join Jeff in the Big Workspace to talk about responsibilities, objects, and
SalesEngine.

### Sales Engine Knowledge Share (10:30 - 12:00)

In this session Foxtrotters and Echos will be together in small groups to share
some experience, gotchas, and pro tips about SalesEngine.

These are some of the examples of things you can talk about.


* What did you wish you knew going into the project?
* What was surprisingly easy about the project?
* What was something unexpected that you learned about Sales Engine?
* What advice did you get from mentors that was counterproductive?

Groups

* Matt Ewell & Mary Beth Burch & Adam Jensen & Tyler Komoroske
* George Hudson & Chris Cenatiempo & Jerrod Paul Junker & Rose Kohn
* Russell Harms & Nicole Hall & Rebekah Sosa
* Matt Hecker & Jeff Ruane & David Stinnette
* Alon Waisman & Travis Haby & Chad Minnerath
* Justin Holzmann & Regis Boudinot & Michael Wong
* Ryan Asensio & Rachel Parry & Mimi Schatz


### Testing Small Datasets (1:00 - 2:30)

Join Mike in Classroom A.

### Work Time (2:30 - 4:00)

Then close out the day with some work time. Maybe it's a good time to try a
"pairing technique" like Ping-Pong or Driver-Navigator?

### Homework

This evening please complete [Part 2 of the POODR reading](https://github.com/turingschool/challenges/blob/master/poodr.markdown).

## 1507 - Echo

### Work Time (9:00 - 10:00)

Start off the day with some work time. Maybe try taking ultra-small steps? If you
go 10 minutes with out committing then `git reset --hard`.

### POODR Part 3 (10:00 - 10:30)

Get together with DJ at the instructors table to share some of your solutions
to the POODR Part 3 homework from yesterday.

### Sales Engine Knowledge Share (10:30 - 12:00)

In this session Foxtrotters and Echos will be together in small groups to share
some experience, gotchas, and pro tips about SalesEngine.

### The Performance of Code (1:00 - 4:00)

Join Josh Cheek at the conference table to talk complexity, performance, and
figuring out how they all fit together.

The material we went over is in [this gist](https://gist.github.com/JoshCheek/e4afb1d9e1c2fc72603b)
and is almost completely stolen from
[this lesson plan](https://github.com/turingschool/lesson_plans/blob/master/ruby_01-object_oriented_programming_with_ruby/performance_of_code.markdown).

We covered timing code, Benchmarking, and RubyProf, as well as writing a handful of different algorithms and seeing how
the time required to execute that code increased along with different mathematical functions, called "Big O" notation.

### Homework

This evening please complete [Part 4 of the POODR reading](https://github.com/turingschool/challenges/blob/master/poodr.markdown).
