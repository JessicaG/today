---
title: 20150720
layout: outline
---

Today, in 1969, Neil Armstrong and Buzz Aldrin became the first humans to walk on the Moon.

## All

### Warm Up (8:30 - 9:00)

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

Five points by pasting your working solution into #warmup-answers by 9:00am.

## 1502

### Game Time Kickoff (9:00 - 9:30)

Join Steve in Classroom A to talk about your next project: [Game Time][].

You'll be working in the following pairs (and one triplet):

* Minnie Lee & Patrick Medaugh
* Thomas Leskin & Michelle Golle
* Tess Griffin & Eric Dowty
* David Daniel & Tracy Caruso
* Kyle Henson & Mihir Parikh
* Lori Culberson & Fred Block
* Andrew Carmer & Kristina Brown & Kenny Chen

[Game Time]: https://github.com/turingschool/lesson_plans/blob/master/ruby_04-apis_and_scalability/gametime_project.markdown

### JavaScript Build Tools (9:30 - 10:45)

Stick around with Steve in Classroom A to talk about setting up a client-side application.

Follow along with [this lesson plan](https://github.com/turingschool/lesson_plans/blob/master/ruby_04-apis_and_scalability/javascript-build-tools.markdown).

We'll cover the following topics:

* How requiring files works in Node.js (e.g. `exports` and `module.exports`)
* npm and the `package.json` file
* Custom npm build script
* Creating your own asset pipeline with [Webpack][]
* Hooking up a test suite

[Webpack]: http://webpack.github.io

Below are some resources that we'll be referencing during the lesson.

* [Webpack][]
* [Steve's Game Time Starter Kit](https://github.com/turingschool-examples/game-time-starter-kit)
* [package.json: an interactive guide][package]

[package]: http://browsenpm.org/package.json

### Structuring a Client-Side Application (10:30 - 12:00)

Steve's golden rules for building a client-side application:

* Build all of your data structures are far away from the DOM as you possibly can
* Allow your data structures to render themselves onto the page
* Events are your friend

### Project Work Time (1:00 - 2:30)

It's game time. (*Nota bene*: Steve is out this afternoon.)

## 1503

### Getting Started with OAuth (9:00 - 11:00)

Learn how to authenticate with a third-party service using OAuth and Omniauth.

For this class, clone the following repo:

```
git clone https://github.com/turingschool-examples/secretic.git oauth
```

Here are the materials for this lesson:

* [Repo](https://github.com/turingschool-examples/secretic.git)
* [Notes](https://www.dropbox.com/s/4nytlnvraszd761/Turing%20-%20Getting%20Started%20with%20OAuth%20%28Notes%29.pages?dl=0)
* [Slides](https://www.dropbox.com/s/byn8y2rqkp9nhy8/Turing%20-%20Getting%20Started%20with%20OAuth.key?dl=0)
* [Video will be posted after the session]

Learn more:

* [OAuth](http://oauth.net)
* [omniauth](https://github.com/intridea/omniauth)
* [figaro](https://github.com/laserlemon/figaro)
* [Differences between OAuth 1.0 and OAuth 2.0](http://stackoverflow.com/questions/4113934/how-is-oauth-2-different-from-oauth-1)

Meet Jorge in Classroom B.

### JSON Fundamentals (11:00 - 12:00)

Learn about the JavaScript Object Notation (JSON) data structure and why is the preferred way for transferring data between services in modern web apps.

Here are the materials for this lesson:

* [Slides](https://www.dropbox.com/s/ztczxt4ojtrjnec/Turing%20-%20JSON%20Fundamentals.key?dl=0)
* [Lesson Plan](https://github.com/turingschool/lesson_plans/blob/master/ruby_03-professional_rails_applications/json_fundementals.markdown)

Learn more:

* [JSON](http://json.org)
* [Introduction to JSON](https://en.wikipedia.org/wiki/JSON)
* [JSONView Plugin for Chrome](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=en)

Stay with Jorge in Classroom B.

### Feed Engine Kick Off (1:00 - 2:30)

Groups TBA.


## 1505

### Traffic Spy Work Time (9:00 - 9:45)

The countdown begins.

### Traffic Spy Evaluations (9:00 - 12:00)

*With Rachel*

* 9:45 - 10:25: Marla, Lovisa, Mike
* 10:30 - 11:10: Mitch, David, Jason

*With Josh*

* 9:45 - 10:25: Adam, Alex, Michael, Samson
* 10:30 - 11:10: Sebastian, Drew, Max, Jai

### Talkin' 'Bout Feelings (11:15)

Meet in the Big Workspace with Josh and Rachel.

##### Individual Feedback

* Fill out [this feedback form](https://docs.google.com/a/casimircreative.com/forms/d/1kbpQV0V1yEYXUi3CpmucWdMR4xuQOkw0E3ucJ7lfgKg/viewform?c=0&w=1) for each member of your group.

##### Group Reflection

* Get together with your Traffic Spy team. One person will create a new [gist](http://gist.github.com) for taking notes.
* Discuss the [reflection questions](https://gist.github.com/jmejia/5d5a8611df6a664fa457#file-1505-traffic-spy-discussion-markdown).
* Submit your notes as a comment to the [reflection questions](https://gist.github.com/jmejia/5d5a8611df6a664fa457#file-1505-traffic-spy-discussion-markdown) gist.

### REST, Controllers, and Routing in Rails (1:00 - 4:00)

Join Rachel as she teaches you all of Rails. In Classroom C.

[Lesson Outline](https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/rest_routing_and_controllers_in_rails.markdown)

[Homework](https://github.com/turingschool/challenges/blob/master/routes_controllers_rails.markdown)

## 1507 - Foxtrot

### Chisel Final Touches (9:00 - 11:00)

Put the final touches on your Chisel but *don't break it!!*

Make sure that you **commit to git** at or before 11AM with your final code. When
your code is up then you need to add the URL for your repo to your *GitHub URL*
line [in this submission file](https://github.com/turingschool/ruby-submissions/blob/master/1507/03-chisel.markdown).

### Intro to Linked Lists (11:00 - 12:00)

Ok, Chisel is over! Join Jeff in Classroom C to start into your next big thing.

We'll go start from the basics together. But if you'd like to read more before or
after the session check out the following:

* [Wikipedia](https://en.wikipedia.org/wiki/Linked_list)
* [Stanford](http://cslibrary.stanford.edu/103/LinkedListBasics.pdf)
* [YouTube](https://www.youtube.com/watch?v=pBrz9HmjFOs)

[Here's the Linked List project assignment](https://github.com/turingschool/challenges/blob/master/linked_lists.markdown)

### Work Time & Chisel Evaluations (1:00 - 3:30)

When you're not evaluating your Chisel project you can *work on your Linked Lists*.
Your Chisel code will be evaluated using your last commit before 11AM, nothing
afterwards.

#### With Jeff

* 1:30 - Mary Beth Burch
* 1:45 - Tyler Komoroske
* 2:00 - Alexander Naistadt
* 2:15 - Justin Pease
* 2:30 - Regis Boudinot
* 2:45 - Rachel Parri
* 3:00 - Bret Doucette
* 3:15 - Nicole Hall

#### With Mike

* 1:00 - Mimi Schatz
* 1:15 - Rose Kohn
* 1:30 - Jeff Ruane
* 1:45 - Chad Minnerath
* 2:00 - David Stinette
* 2:15 - Adam Jensen
* 2:30 - Christ Cenatiempo
* 2:45 - Michael Wong
* 3:00 - Rebekah Sosa
* 3:15 - Travis Haby

### Chisel Postmortem (3:30 - 4:00)

Classroom A with Jeff.

### Homework

In addition to starting into your project, read/watch these two resources:

* [Unit Testing](https://en.wikibooks.org/wiki/Ruby_Programming/Unit_testing)
* [TDD: Write Better Code In Less Time](https://www.youtube.com/watch?v=HhwElTL-mdI)

## 1507 - Echo

### Binary Search Tree Evaluations (9:00 - 11:00)

By 9AM please push your final code to your GitHub repo and
[add your repo URL here](https://github.com/turingschool/ruby-submissions/blob/master/1507/02-binary-search-tree.markdown). Code committed after 9AM will not be evaluated.

#### With Jeff

* 9:00 - Matt Hecker
* 9:20 - Russell Harms
* 9:40 - Alon Waisman
* 10:00 - Matt Ewell

#### With Mike

* 9:00 - George Hudson
* 9:20 - Jerrod Paul Junker
* 9:40 - Justin Holzmann
* 10:00 - Ryan Asensio

### Throwdown: Robots, Robots, Robots (9:00 - 11:00)

During the time you are not being evaluated, let's try our first Throwdown.

You have less than 100 minutes to build a (simplistic) robot simulator:

[Robots](https://github.com/turingschool/code_retreat/tree/master/robot)

We're *not* doing this as a code retreat exercise, so ignore bits about pairing.

You *should* follow the `Robot` and `RobotSimulator` description as well as the
`robot_test.rb`.

*If* you get done before 11AM, try implementing the *G. Functional Planes* constraint.

### Robots in Review: (11:00 - 12:00)

Join Mike at the Classroom A Conference Table to review a few of your solutions
and discuss strengths/weaknesses.

### Enigma Kickoff (1:00 - 1:12)

Join Jeff at the Classroom A Conference Table to kickoff
[your Enigma project](https://github.com/JumpstartLab/curriculum/blob/master/source/projects/enigma.markdown).

### Enigma Work Time (1:20 - 3:30)

Dig into Enigma. Remember your lessons learned from BSTs!

### Enigma Q&A (3:30 - 4:00)

For the last chunk of the day let's get all together at the Classroom A Conference
Table and talk about findings, strategy, and questions with Mike.

### Homework

In addition to starting into your project, read/watch these two resources:

* [Read the Documentation for SimpleCov](https://github.com/colszowka/simplecov)
* [Integration Testing vs Acceptance Testing](http://stackoverflow.com/questions/4019646/integration-vs-acceptance-test-what-is-cucumber-steak)
